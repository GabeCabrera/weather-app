{"version":3,"sources":["components/Titles.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","Form","props","onSubmit","getWeather","type","name","id","required","autoComplete","htmlFor","value","Weather","city","country","temperature","humidity","description","error","API_KEY","App","state","undefined","_callee","e","api_call","data","regenerator_default","wrap","_context","prev","next","preventDefault","target","elements","fetch","concat","sent","json","_this","setState","Math","round","main","temp","sys","weather","stop","rel","href","components_Titles","components_Form","this","components_Weather","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.388e4486.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Titles = () => (\r\n\t<div className=\"titles\">\r\n\t\t<h1 className=\"weather-title\">Weather</h1>\r\n\t\t<p>Find out temperature, conditions and more</p>\r\n\t</div>\r\n)\r\n\r\nexport default Titles;\r\n","import React from \"react\";\r\n\r\nconst Form = props => (\r\n  <div className=\"form-container\">\r\n    <form onSubmit={props.getWeather}>\r\n    <input type=\"text\" name=\"city\" className=\"question\" id=\"city\" required autoComplete=\"off\"/>\r\n    <label htmlFor=\"city\"><span>City</span></label>\r\n    \r\n    <input type=\"text\" name=\"country\" className=\"question\" id=\"country\" required autoComplete=\"off\"/>\r\n    <label htmlFor=\"name\"><span>Country</span></label>\r\n    <input type=\"submit\" value=\"Submit\"/>\r\n    </form>\r\n  </div>\r\n);\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst Weather = props => (\r\n\t<div className=\"weather-content\">\r\n\t\t{ props.city && props.country && <p>Location: { props.city }, { props.country }</p> }\r\n\t\t{ props.temperature && <p>Temperature: { props.temperature }</p> }\r\n\t\t{ props.humidity && <p>Humidity: {props.humidity}</p> }\r\n\t\t{ props.description && <p>Conditions: { props.description }</p> }\r\n\t\t{ props.error && <p>{ props.error}</p>}\r\n\t</div>\r\n)\r\n\r\nexport default Weather;","import React, { Component } from 'react';\nimport './App.css';\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nconst API_KEY = '37e85e64bb7a988dd54ed9a3d7908b87'\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  }\n\n  getWeather = async (e) => {\n\n    e.preventDefault()\n\n    const city = e.target.elements.city.value;\n    const country = e.target.elements.country.value;\n\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=imperial`);\n    const data = await api_call.json();\n\n    if (city && country) {\n      this.setState({\n        temperature: Math.round(data.main.temp) + \"Â°\",\n        city: data.name,\n        country: data.sys.country,\n        humidity: data.main.humidity + '%',\n        description: data.weather[0].description,\n        error: ''\n      })\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: 'Please enter a valid city and country.'\n      })\n    }\n  }\n\n  render() {\n    \n    return (\n      <div className=\"weather-container\">\n      <link rel=\"shortcut icon\" href=\"http://www.iconarchive.com/download/i79720/martz90/hex/weather-2.ico\" type=\"image/x-icon\" />\n        <Titles />\n        <Form getWeather={this.getWeather} />\n        <Weather\n          temperature={this.state.temperature}\n          city={this.state.city}\n          country={this.state.country}\n          humidity={this.state.humidity} \n          description={this.state.description}\n          error={this.state.error}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}